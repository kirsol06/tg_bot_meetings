# Отчет по проекту "Telegram-бот для управления встречами"

## Введение

Проект "Telegram-бот для управления встречами" был разработан с целью упрощения процесса планирования встреч и управления расписанием для пользователей. Бот предоставляет пользователям возможность регистрироваться, просматривать свои встречи, а также планировать новые встречи, проверяя при этом доступность участников.

## Обзор функциональности

### Основные функции бота:

1. **Регистрация пользователей**:
   - Пользователи могут зарегистрироваться в базе данных бота через команду `/register`.

2. **Назначение встреч**:
   - Команда `/set_schedule_meeting` позволяет пользователям запланировать встречу, вводя необходимые данные. Пользователь вводит данные о встрече поэтапно:
     - Дата и время начала.
     - Время окончания.
     - Юзернеймы участников.
     - Название и описание встречи.

3. **Просмотр встреч**:
   - Пользователи могут просмотреть все свои запланированные встречи с помощью команды `/view_meetings`.

4. **Удаление встреч**:
   - Поддержка команды `/delete_meeting` для удаления запланированных встреч.

5. **Статистика встреч**:
   - Команда `/stats` отображает статистику встреч и визуализацию загруженности.

6. **Уведомления о встречах**:
   - Бот отправляет пользователям уведомления о предстоящих встречах.

### Используемые технологии

- **Python**: Основной язык программирования для разработки бота.
- **Telebot**: Библиотека для работы с Telegram Bot API.
- **SQLite**: Легковесная база данных для хранения информации о пользователях и встречах.
- **Matplotlib**: Библиотека для визуализации данных и создания графиков.
- **Python-dotenv**: Библиотека для работы с переменными окружения, позволяющая безопасно хранить конфиденциальные данные.

## Структура проекта

Проект состоит из нескольких файлов, каждый из которых отвечает за определенную функциональность:

- `bot.py`: Основной файл для инициализации и запуска бота.
- `meetings.py`: Логика управления встречами и пользователями.
- `register.py`: Модуль для регистрации пользователей в базе данных.
- `reminders.py`: Логика отправки уведомлений пользователям о предстоящих встречах.
- `stats.py`: Генерация статистики встреч и визуализация данных.
- `utils.py`: Утилиты для работы с базой данных и общими операциями.
- `requirements.txt`: Список зависимостей для проекта.

## Тестирование

В проекте предусмотрены тесты для проверки работоспособности функциональности бота. Используются библиотека `unittest` и `unittest.mock` для мокирования зависимостей и тестирования системы. Тесты охватывают ключевые функции бота, включая:
- Проверку правильности регистрации пользователей.
- Проверку возможности создания и обработки встреч.
- Обработку ошибок и уведомления о некорректных вводах.

## Результаты и выводы

В результате реализации проекта был создан рабочий Telegram-бот, способный эффективно управлять встречами, обеспечивая удобный интерфейс для пользователей. 

- Бот был протестирован и демонстрирует стабильную работу с ограничениями пользователей и проверкой их доступности на запланированные встречи.
- Реализованы функции для обработки ошибок и ввода пользователями данных, что делает взаимодействие более интуитивным.
