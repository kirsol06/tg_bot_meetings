import sqlite3
import datetime

def get_db_connection():
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    return sqlite3.connect('bot_database2.db')

def get_meetings_for_user(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = datetime.datetime.now()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ meeting_id –∏–∑ participants, –∞ –∑–∞—Ç–µ–º –≤—ã–±–æ—Ä–∫–∞ –±—É–¥—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á
    cursor.execute("""
        SELECT m.id, m.title, m.start_time, m.end_time, m.description 
        FROM meetings m
        JOIN participants p ON m.id = p.meeting_id
        WHERE p.user_id = ? AND m.start_time > ?
    """, (user_id, now))

    meetings = cursor.fetchall()
    conn.close()
    return meetings


def users_are_free(usernames, start_time, end_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–Ω—ã –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ."""
    unavailable_users = []
    with get_db_connection() as conn:
        cursor = conn.cursor()
        for username in usernames:
            cursor.execute('SELECT user_id FROM users WHERE username = ?', (username,))
            user = cursor.fetchone()
            if user:
                user_id = user[0]
                meetings = get_meetings_for_user(user_id)
                for meeting in meetings:
                    meeting_start = datetime.datetime.strptime(meeting[2], "%Y-%m-%d %H:%M:%S")
                    meeting_end = datetime.datetime.strptime(meeting[3], "%Y-%m-%d %H:%M:%S")
                    if (start_time < meeting_end and end_time > meeting_start): # –ò—â–µ–º –∑–∞–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
                        unavailable_users.append(username)
                        break
    return unavailable_users

def find_nearest_free_time(meetings, duration, start_time):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é."""
    next_free_time = start_time 
    while True:
        is_free = True
        meeting_end_time = next_free_time + datetime.timedelta(minutes=duration)  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏
        for meeting in meetings:
            start_time = datetime.datetime.strptime(meeting[2], "%Y-%m-%d %H:%M:%S")
            end_time = datetime.datetime.strptime(meeting[3], "%Y-%m-%d %H:%M:%S")

            if next_free_time < end_time and meeting_end_time > start_time: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á
                is_free = False
                break

        if is_free: # –ó–Ω–∞—á–∏—Ç –Ω–∞—à–ª–∏ —Ç–æ—Ç —Å–∞–º—ã–π —Å–ª–æ—Ç
            return next_free_time

        next_free_time += datetime.timedelta(minutes=15)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    
def all_usernames_exist(usernames):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –≤—Å–µ —é–∑–µ—Ä–Ω–µ–π–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    cursor = conn.cursor()

    existing_usernames = set()
    cursor.execute('SELECT username FROM users') 
    for row in cursor.fetchall():
        existing_usernames.add(row[0])  # –°–æ–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —é–∑–µ—Ä–Ω–µ–π–º—ã

    conn.close()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    return all(username in existing_usernames for username in usernames)

def send_meeting_notification(bot, user_id, title, start_time, end_time, description):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ."""
    start_time = start_time.split()
    s_time = start_time[1]
    s_date = start_time[0]
    s_date = s_date[8:] + '-' + s_date[5:7] + '-' + s_date[0:4]
    start_time = s_date + ' ' + s_time[:-3]

    end_time = end_time.split()
    e_time = end_time[1]
    e_date = end_time[0]
    e_date = e_date[8:] + '-' + e_date[5:7] + '-' + e_date[0:4]
    end_time = e_date + ' ' + e_time[:-3]
    
    message = (
        f"üî• –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞!\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"–≠—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –≤–∞—à–µ–º –≥—É–≥–ª-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã"
    )
    bot.send_message(user_id, message)



def add_meeting(bot, title: str, start_time: str, end_time: str, description: str, usernames: list):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('INSERT INTO meetings (title, start_time, end_time, description) VALUES (?, ?, ?, ?)',
                   (title, start_time, end_time, description))
    meeting_id = cursor.lastrowid  # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É participants
    for username in usernames:
        cursor.execute('SELECT user_id FROM users WHERE username = ?', (username,))
        user = cursor.fetchone()
        if user:
            user_id = user[0]
            cursor.execute('INSERT INTO participants (meeting_id, user_id) VALUES (?, ?)', (meeting_id, user_id))
            send_meeting_notification(bot, user_id, title, start_time, end_time, description)

    conn.commit()
    conn.close() 


def get_last_meeting_for_user(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = datetime.datetime.now()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º id —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    cursor.execute("""
        SELECT m.id, m.title, m.start_time, m.end_time, m.description
        FROM meetings m
        WHERE m.id = (
            SELECT MAX(m.id)
            FROM meetings m
            JOIN participants p ON m.id = p.meeting_id
            WHERE p.user_id = ? AND m.start_time > ?
        )
    """, (user_id, now))

    meeting = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º id
    conn.close()

    return meeting

def get_user_email(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT email FROM users WHERE user_id = ?", (user_id,))
    email = cursor.fetchone()
    
    conn.close()
    return email

def get_participants(meeting):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM participants WHERE meeting_id = ?", (meeting[0],))
    participants = cursor.fetchall()
    conn.close()

    return [pid[0] for pid in participants]  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π

