import pytest
from unittest.mock import *
import datetime
import io
from commands.utils import *
from commands.meetings import *
from commands.register import *
from commands.stats import *
from commands.reminders import *


def test_all_usernames_exist():
    with patch('commands.utils.get_db_connection') as mock_conn:
        mock_cursor = MagicMock()
        mock_cursor.fetchall.return_value = [('user1',), ('user2',)]
        mock_conn.return_value.cursor.return_value = mock_cursor
        
        assert all_usernames_exist(['user1', 'user2'])
        assert not all_usernames_exist(['user1', 'user3'])

def test_set_free_meeting():
    bot = MagicMock()
    message = MagicMock()
    message.chat.id = 12345

    with patch('commands.meetings.create_cancel_keyboard', return_value=MagicMock()) as mock_create_cancel_keyboard:
        set_free_meeting(bot, message)

        bot.send_message.assert_called_with(
            message.chat.id,
            '–í–≤–µ–¥–∏—Ç–µ usernames —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –≤—Å—Ç—Ä–µ—á–∏, —Ç–æ —Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º —Ç–æ–∂–µ –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏',
            reply_markup=mock_create_cancel_keyboard.return_value  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        )


def test_send_meeting_notification():
    bot = MagicMock()
    user_id = 12345
    title = "–í—Å—Ç—Ä–µ—á–∞"
    start_time = "2023-10-01 12:00:00"
    end_time = "2023-10-01 13:00:00"
    description = "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏"

    send_meeting_notification(bot, user_id, title, start_time, end_time, description)

    bot.send_message.assert_called_once_with(
        user_id, 
        f"üî• –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞!\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time[:-3]}\n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time[:-3]}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
    )


def test_delete_meeting_handler():
    bot = MagicMock()
    message = MagicMock()
    message.text = '1'
    message.chat.id = 67890
    
    with patch('commands.meetings.get_db_connection') as mock_conn:
        mock_cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = mock_cursor
        mock_cursor.fetchone.return_value = (1, "Meeting Title")  # –í—Å—Ç—Ä–µ—á–∞ –Ω–∞–π–¥–µ–Ω–∞

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        delete_meeting_handler(bot, message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        mock_cursor.execute.assert_any_call('DELETE FROM meetings WHERE id = ?', (1,))
        mock_cursor.execute.assert_any_call('DELETE FROM participants WHERE meeting_id = ?', (1,))
        bot.send_message.assert_called_once_with(message.chat.id, '–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')

def test_generate_monthly_stats_plot():
    bot = MagicMock()
    message = MagicMock()
    message.chat.id = 67890

    # –ü–∞—Ç—á–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    with patch('commands.stats.get_db_connection') as mock_conn, \
         patch('commands.stats.calculate_average_meeting_duration') as mock_calculate_duration, \
         patch('matplotlib.pyplot.savefig') as mock_savefig:

        mock_cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = mock_cursor

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        first_day_of_month = datetime.datetime.now().replace(day=1)
        last_day_of_month = (first_day_of_month + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á
        mock_calculate_duration.return_value = (30, 5, 150)  # (average_duration, count, total_time)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å—Ç—Ä–µ—á –ø–æ –¥–Ω—è–º
        meetings_per_day_data = [
            (first_day_of_month.strftime('%Y-%m-%d'), 2),
            ((first_day_of_month + datetime.timedelta(days=1)).strftime('%Y-%m-%d'), 3),
        ]
        mock_cursor.fetchall.return_value = meetings_per_day_data

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        generate_monthly_stats_plot(bot, message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä–∞—Ñ–∏–∫ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        days = [0] * last_day_of_month.day  # 31 –¥–µ–Ω—å
        days[0] = 2  # 1 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
        days[1] = 3  # 2 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
        bot.send_photo.assert_called_once_with(
            message.chat.id,
            ANY,  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏
            caption="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ –¥–Ω—è–º.\n–í–∞—à–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á: 5.\n–í–∞—à–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: 30 –º–∏–Ω—É—Ç.\n–í–∞—à–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á: 150 –º–∏–Ω—É—Ç."
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≥—Ä–∞—Ñ–∏–∫
        mock_savefig.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
        mock_conn.return_value.close.assert_called_once()

def test_register_user_already_registered():
    bot = MagicMock()
    message = MagicMock()
    message.from_user.id = 12345
    message.from_user.username = "test_user"
    message.chat.id = 67890

    with patch('commands.register.get_db_connection') as mock_conn:
        mock_cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = mock_cursor

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_cursor.fetchone.return_value = (1, "test_user")  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        
        register_user(bot, message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ insert –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_cursor.execute.assert_called_once_with('SELECT * FROM users WHERE user_id = ?', (12345,))
        bot.send_message.assert_called_once_with(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')


def test_register_user_new_user():
    bot = MagicMock()
    message = MagicMock()
    message.from_user.id = 12345
    message.from_user.username = "new_user"
    message.chat.id = 67890

    with patch('commands.register.get_db_connection') as mock_conn:
        mock_cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = mock_cursor
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_cursor.fetchone.return_value = None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

        register_user(bot, message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ insert –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_cursor.execute.assert_any_call('SELECT * FROM users WHERE user_id = ?', (12345,))
        mock_cursor.execute.assert_any_call('INSERT INTO users (user_id, username) VALUES (?, ?)', (12345, "new_user"))
        bot.send_message.assert_called_once_with(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')



from unittest.mock import MagicMock, patch

def test_process_start_time_invalid_format1():
    bot = MagicMock()
    message = MagicMock()
    message.chat.id = 67890
    message.text = "invalid_format"

    # –ü–∞—Ç—á–∏–Ω–≥ create_cancel_keyboard, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∑–∞–º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
    with patch('commands.meetings.create_cancel_keyboard', return_value=MagicMock()) as mock_create_cancel_keyboard:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        process_scheduled_start_time(bot, message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        bot.send_message.assert_called_once_with(
            message.chat.id,
            '–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.',
            reply_markup=mock_create_cancel_keyboard.return_value  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç
        )


def test_process_start_time_invalid_format2():
    bot = MagicMock()
    message = MagicMock()
    message.chat.id = 67890
    message.text = "2024-12-01 25:17"

    # –ü–∞—Ç—á–∏–Ω–≥ create_cancel_keyboard, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∑–∞–º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
    with patch('commands.meetings.create_cancel_keyboard', return_value=MagicMock()) as mock_create_cancel_keyboard:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        process_scheduled_start_time(bot, message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        bot.send_message.assert_called_once_with(
            message.chat.id,
            '–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.',
            reply_markup=mock_create_cancel_keyboard.return_value  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç
        )



def test_save_meeting_success():
    bot = MagicMock()
    message = MagicMock()
    message.chat.id = 67890
    message.text = "Test meeting description"
    
    title = "Test Meeting"
    start_time = datetime.datetime(2024, 12, 1, 20, 30)
    end_time = datetime.datetime(2024, 12, 1, 21, 30)
    usernames = ['user1', 'user2']

    # –ü–∞—Ç—á–∏–Ω–≥ create_keyboard
    with patch('commands.meetings.create_keyboard', return_value=MagicMock()) as mock_create_keyboard, \
         patch('commands.meetings.add_meeting') as mock_add_meeting:
        
        mock_add_meeting.return_value = None  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ add_meeting –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        
        save_scheduled_meeting(bot, message, title, start_time, end_time, usernames)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_add_meeting.assert_called_once_with(
            bot,
            'bot_database.db',
            title=title,
            start_time=start_time.strftime("%Y-%m-%d %H:%M:%S"),
            end_time=end_time.strftime("%Y-%m-%d %H:%M:%S"),
            description=message.text.strip(),
            usernames=usernames
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        bot.send_message.assert_called_once_with(
            message.chat.id,
            '–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!',
            reply_markup=mock_create_keyboard.return_value  # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        )


def test_view_meetings_no_meetings():
    bot = MagicMock()
    message = MagicMock()
    message.chat.id = 67890  # ID —á–∞—Ç–∞
    message.from_user.id = 12345  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–∞—Ç—á–∏–Ω–≥ get_meetings_for_user, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    with patch('commands.meetings.get_meetings_for_user', return_value=[]), \
         patch('commands.meetings.create_keyboard', return_value=MagicMock()) as mock_create_keyboard:

        view_meetings(bot, message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á
        bot.send_message.assert_called_once_with(
            message.chat.id,
            '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.',
            reply_markup=mock_create_keyboard.return_value  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        )


def test_view_meetings_with_meetings():
    bot = MagicMock()
    message = MagicMock()
    message.chat.id = 67890
    message.from_user.id = 12345

    user_meetings = [
        (1, '–í—Å—Ç—Ä–µ—á–∞ 1', '2024-12-01 20:30:00', '2024-12-01 21:30:00', '–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ 1'),
        (2, '–í—Å—Ç—Ä–µ—á–∞ 2', '2024-12-02 18:00:00', '2024-12-02 19:00:00', '–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ 2'),
    ]

    with patch('commands.meetings.get_meetings_for_user', return_value=user_meetings), \
         patch('commands.meetings.create_keyboard', return_value=MagicMock()) as mock_create_keyboard:

        view_meetings(bot, message)

        expected_response = (
            "–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ  –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:\n \n"
            "ID: 1; \n –ù–∞–∑–≤–∞–Ω–∏–µ: –í—Å—Ç—Ä–µ—á–∞ 1, \n –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: 2024-12-01 20:30, \n "
            "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: 2024-12-01 21:30, \n –û–ø–∏—Å–∞–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ 1 \n \n"
            "ID: 2; \n –ù–∞–∑–≤–∞–Ω–∏–µ: –í—Å—Ç—Ä–µ—á–∞ 2, \n –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: 2024-12-02 18:00, \n "
            "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: 2024-12-02 19:00, \n –û–ø–∏—Å–∞–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ 2 \n \n"
        )

        bot.send_message.assert_called_once_with(
            message.chat.id,
            expected_response,
            reply_markup=mock_create_keyboard.return_value  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        )



def test_send_reminders_no_reminders():
    bot = MagicMock()

    # –ü–∞—Ç—á–∏–Ω–≥ get_db_connection, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∑–∞–º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    with patch('commands.reminders.get_db_connection') as mock_get_db_connection:
        mock_conn = MagicMock()
        mock_cursor = MagicMock()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –¥–ª—è –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞
        mock_get_db_connection.return_value = mock_conn
        mock_conn.cursor.return_value = mock_cursor

        now = datetime.datetime.now()
        reminder_time = now + datetime.timedelta(minutes=30)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞ - —É –Ω–∞—Å –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        mock_cursor.fetchall.return_value = []

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        send_reminders(bot)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        bot.send_message.assert_not_called()
